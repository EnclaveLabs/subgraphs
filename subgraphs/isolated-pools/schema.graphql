"""
The Pool Registry entity manages pools and markets
"""
type PoolRegistry @entity {
    "ID is set to 1"
    id: ID!
}


enum RiskRating {
    VERY_HIGH_RISK
    HIGH_RISK
    MEDIUM_RISK
    LOW_RISK
    MINIMAL_RISK
}


enum PoolActionType {
  Transfer
  Seize
}

type PoolAction @entity {
    id: ID!
    action: PoolActionType!
    pauseState: Boolean!
    pool: Bytes!
}

"""
The Pool entity
"""
type Pool @entity {
    "Comptroller of the pool"
    id: ID!
    "Name of the pool"
    name: String!
    "Creator of the pool"
    creator: Bytes!
    "Block where the market was created"
    blockPosted: BigInt!
    "Timestamp of market creation"
    timestampPosted: BigInt!
    "Rating of the pools risk level"
    riskRating: RiskRating!
    "Category that the pool belongs too"
    category: String!
    "Url for pool logo"
    logoUrl: String!
    "Description of the pool"
    description: String!
    "Address of price oracle the comptroller uses"
    priceOracleAddress: Bytes!
    "Factor used to determine repayAmount for liquidating"
    closeFactorMantissa: BigInt!
    "The percent bonus liquidators get for liquidating"
    liquidationIncentiveMantissa: BigInt!
    "Min Liquidable Amount allowed"
    minLiquidatableCollateralMantissa: BigInt!
    "Markets associated to this pool"
    markets: [Market!]! @derivedFrom(field: "pool")

    "Reward distributors distributing rewards for markets in this pool"
    rewardsDistributors: [RewardsDistributor!]! @derivedFrom(field: "pool")
}

"""
enum MarketPauseGuardianAction {
  Mint = "Mint",
  Borrow = "Borrow",
}
"""
type MarketAction @entity {
    id: ID!
    vToken: Bytes!
    action: String!
    pauseState: Boolean!
}

"""
Market stores all high level variables for a vToken market
"""
type Market @entity {
    "VToken address"
    id: ID!
    "Pool the market belongs to"
    pool: Pool!
    #Fields that match Venus API
    "Borrow rate per block"
    borrowRateMantissa: BigInt!
    "The vToken contract balance of BEP20 or BNB"
    cash: BigDecimal!
    "Collateral factor determining how much one can borrow"
    collateralFactorMantissa: BigInt!
    "Exchange rate of tokens / vTokens"
    exchangeRateMantissa:  BigInt!
    "Address of the interest rate model"
    interestRateModelAddress: Bytes!
    "Name of the vToken"
    name: String!
    "Reserves stored in the contract"
    reservesMantissa: BigInt!
    "Supply rate per block"
    supplyRateMantissa: BigInt!
    "VToken symbol"
    symbol: String!
    "Underlying token address"
    underlyingAddress: Bytes!
    "Underlying token name"
    underlyingName: String!
    "Underlying token symbol"
    underlyingSymbol: String!
    "Max token borrow amount allowed"
    borrowCapMantissa: BigInt!
    "Total borrowed"
    treasuryTotalBorrowsMantissa: BigInt!
    "Total supplied"
    treasuryTotalSupplyMantissa: BigInt!

    # Fields that are not in Venus api
    "Block the market is updated to"
    accrualBlockNumber: Int!
    "Timestamp the market was most recently updated"
    blockTimestamp: Int!
    "The history of the markets borrow index return (Think S&P 500)"
    borrowIndexMantissa: BigInt!
    "The factor determining interest that goes to reserves"
    reserveFactorMantissa: BigInt!
    "Underlying token price in USD"
    underlyingPriceUsd: BigDecimal!
    "Underlying token decimal length"
    underlyingDecimals: Int!

    "Supply cap set for market"
    supplyCapMantissa: BigInt!
    "The amount of bad debt in the market"
    badDebtMantissa: BigInt!
    "Contract address for the Access Control Manager"
    accessControlManagerAddress: Bytes

    "Number of accounts currently supplying to this market"
    supplierCount: BigInt!
    "Number of accounts currently borrowing from this market"
    borrowerCount: BigInt!

    "Multiplier representing the collateralization after which the borrow is eligible for liquidation"
    liquidationThresholdMantissa: BigInt!

    "Accounts who participate in this market"
    accounts: [AccountVToken!]! @derivedFrom(field:"market")
}

"""
Account is an BNB address, with a list of all vToken markets the account has
participated in, along with liquidation information.
"""
type Account @entity {
    "User BNB address"
    id: ID!
    "Array of VTokens user is in"
    tokens: [AccountVToken!]! @derivedFrom(field: "account")
    "Count user has been liquidated"
    countLiquidated: Int!
    "Count user has liquidated others"
    countLiquidator: Int!
    "True if user has ever borrowed"
    hasBorrowed: Boolean!
}

"""
AccountVToken is a single account within a single vToken market, with data such
as interest earned or paid
"""
type AccountVToken @entity {
    "Concatenation of VToken address and user address"
    id: ID!
    "Relation to market"
    market: Market!
    "Symbol of the vToken"
    symbol: String!
    "Relation to user"
    account: Account!
    "Transactions data"
    transactions: [AccountVTokenTransaction!]! @derivedFrom(field:"accountVToken")
    "Bad debt data for the account in the market"
    badDebt: [AccountVTokenBadDebt!]! @derivedFrom(field:"account")
    "Block number this asset was updated at in the contract"
    accrualBlockNumber: BigInt!
    
    "Amount of tokens supplied to the market"
    accountSupplyBalanceMantissa: BigInt!
    "Current borrow balance stored in contract (exclusive of interest since accrualBlockNumber)"
    accountBorrowBalanceMantissa: BigInt!
    "True if user is entered, false if they are exited"
    enteredMarket: Boolean!

    "Total amount of underling redeemed"
    totalUnderlyingRedeemedMantissa: BigDecimal!
    "The value of the borrow index upon users last interaction"
    accountBorrowIndexMantissa: BigInt!
    "Total amount underlying repaid"
    totalUnderlyingRepaidMantissa: BigDecimal!
}

"""
Auxiliary entity for AccountVToken
"""
type AccountVTokenTransaction @entity {
  "Concatenation of the transaction hash and the log index"
  id: ID!

  "ID of the corresponding account and VToken"
  accountVToken: AccountVToken!

  "Transaction Hash"
  txHash: Bytes!

  "Transaction timestamp"
  timestamp: BigInt!

  "Transaction block"
  block: BigInt!

  "Index of the log in the block logs"
  logIndex: BigInt!
}

"""
Auxiliary entity for AccountVToken indicating when a certain amount of bad debt was healed
"""
type AccountVTokenBadDebt @entity {
  id: ID!

  account: AccountVToken!

  amount: BigInt!

  timestamp: BigInt!

  block: BigInt!
}

enum EventType {
    MINT
    REDEEM
    BORROW
    TRANSFER
    LIQUIDATE
    REPAY
}

"""
An interface for a transfer of any vToken. TransferEvent, MintEvent,
RedeemEvent, and LiquidationEvent all use this interface
"""
type Transaction @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "enum of event type"
    type: EventType!
    "The account that sent the tokens, usually vToken"
    from: Bytes!
    "count of vTokens transferred"
    amount: BigDecimal!
    "Account that received tokens"
    to: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Optional parameters for the transaction"
    params: TransactionParams
}

enum TransactionParamKey {
    UNDERLYING_AMOUNT
    ACCOUNT_BORROWS
    UNDERLYING_REPAY_AMOUNT
}

"""
TransactionParams hold extra information about a Transaction depending on the type of the transacton
"""
type TransactionParams @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "Name of the field"
    key: TransactionParamKey!
    "Value of the field"
    value: String!
}

"""
An interface for rewards distributor that distribute rewards to isolated pools
"""
type RewardsDistributor @entity {
    "Address of the rewards distributor"
    id: ID!
    "Address of the pool"
    pool: Pool!
    "Address of the reward distributed"
    reward: Bytes!
    "Distribution rate for suppliers"
    rewardSpeeds: [RewardSpeed!]! @derivedFrom(field:"rewardsDistributor")
}

"""
A interface for rewards distributor that distribute rewards to isolated pools
"""
type RewardSpeed @entity {
    "ID created from the reward distributor and market this speed applies to"
    id: ID!
    "Address of rewards distributor"
    rewardsDistributor: RewardsDistributor!
    "Address of the market this speed applies to"
    market: Market!
    "Distribution rate for borrowers"
    borrowSpeedPerBlockMantissa: BigInt
    "Distribution rate for suppliers"
    supplySpeedPerBlockMantissa: BigInt
}

enum AuctionStatus {
    NOT_STARTED,
    STARTED,
    ENDED
}

enum AuctionType {
    LARGE_POOL_DEBT,
    LARGE_RISK_FUND
}

type Auction @entity {
    "Comptroller address of the auction"
    id: ID!
    "Indicates wheter the auction has started/ended"
    status: AuctionStatus!
    "Auction's type"
    type: AuctionType!
    "The block where the auction started"
    startBlock: BigInt!
    "Account that made the highest bid"
    highestBidder: Bytes
    "Basis points of the highest bid"
    highestBidBps: BigInt
    "Block number of the highest bid"
    highestBidBlock: BigInt
    "Seized risk fund in the auction"
    seizedRiskFund: BigInt!
    "Initial bid percent of the risk fund or bad debt depending on auction type"
    startBidBps: BigInt!
    "Markets involved in the auction"
    markets: [Bytes!]
    "Debts of the markets in the auction"
    marketsDebt: [BigInt!]
}
