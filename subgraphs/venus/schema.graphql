"""
The Comptroller type has protocol level variables stored
"""
type Comptroller @entity {
    "ID is set to 1"
    id: Bytes!
    "Address of price oracle the comptroller uses"
    priceOracle: Bytes!
    "Factor used to determine repayAmount for liquidating"
    closeFactor: BigInt!
    "The percent bonus liquidators get for liquidating"
    liquidationIncentive: BigInt!
    "Max assets a single user can enter"
    maxAssets: BigInt!
}

"""
Market stores all high level variables for a vToken market
"""
type Market @entity {
    "VToken address"
    id: Bytes!
    #Fields that match Venus API
    "Borrow rate per block"
    borrowRateMantissa: BigInt!
    "The vToken contract balance of BEP20 or BNB"
    cashMantissa: BigInt!
    "Collateral factor determining how much one can borrow"
    collateralFactorMantissa: BigInt!
    "Exchange rate of tokens / vTokens"
    exchangeRateMantissa:  BigInt!
    "Address of the interest rate model"
    interestRateModelAddress: Bytes!
    "Name of the vToken"
    name: String!
    "Reserves stored in the contract"
    reservesMantissa: BigInt!
    "Supply rate per block"
    supplyRateMantissa: BigInt!
    "VToken symbol"
    symbol: String!
    "Borrows in the market"
    totalBorrowsMantissa: BigInt!
    "Total underlying supplied"
    totalSupplyMantissa: BigInt!
    "Underlying token address"
    underlyingAddress: Bytes!
    "Underlying token name"
    underlyingName: String!
    "Underlying token symbol"
    underlyingSymbol: String!

    # Fields that are not in Venus api
    "Block the market is updated to"
    accrualBlockNumber: Int!
    "Timestamp the market was most recently updated"
    blockTimestamp: Int!
    "The history of the markets borrow index return (Think S&P 500)"
    borrowIndexMantissa: BigInt!
    "The factor determining interest that goes to reserves"
    reserveFactor: BigInt!
    "Underlying token price in USD cents"
    underlyingPriceCents: BigInt!
    "Underlying token decimal length"
    underlyingDecimals: Int!
    "Total XVS Distributed for this market"
    totalXvsDistributedMantissa: BigInt!
    "vToken decimal length"
    vTokenDecimals: Int!

    "Number of accounts currently supplying to this market"
    supplierCount: BigInt!

    "Number of accounts with reasonable borrow positions in this market (excludes accounts with dust (potentially left over from liquidations))"
    borrowerCountAdjusted: BigInt!

    "Number of accounts currently borrowing from this market"
    borrowerCount: BigInt!
}

"""
Account is an BNB address, with a list of all vToken markets the account has
participated in, along with liquidation information.
"""
type Account @entity {
    "User BNB address"
    id: Bytes!
    "Array of VTokens user is in"
    tokens: [AccountVToken!]! @derivedFrom(field: "account")
    "Count user has been liquidated"
    countLiquidated: Int!
    "Count user has liquidated others"
    countLiquidator: Int!
    "True if user has ever borrowed"
    hasBorrowed: Boolean!
}

"""
AccountVToken is a single account within a single vToken market, with data such
as interest earned or paid
"""
type AccountVToken @entity {
    "Concatenation of VToken address and user address"
    id: Bytes!
    "Relation to market"
    market: Market!
    "Symbol of the vToken"
    symbol: String!
    "Relation to user"
    account: Account!
    "Transactions data"
    transactions: [AccountVTokenTransaction!]! @derivedFrom(field:"account")
    "Block number this asset was updated at in the contract"
    accrualBlockNumber: BigInt!
    "True if user is entered, false if they are exited"
    enteredMarket: Boolean!

    "VToken balance of the user"
    vTokenBalanceMantissa: BigInt!
    "Total amount of underlying supplied"
    totalUnderlyingSuppliedMantissa: BigInt!
    "Total amount of underlying redeemed"
    totalUnderlyingRedeemedMantissa: BigInt!
    "The value of the borrow index upon users last interaction"
    accountBorrowIndexMantissa: BigInt!
    "Total amount underlying borrowed, exclusive of interest"
    totalUnderlyingBorrowedMantissa: BigInt!
    "Total amount underlying repaid"
    totalUnderlyingRepaidMantissa: BigInt!
    "Current borrow balance stored in contract (exclusive of interest since accrualBlockNumber)"
    storedBorrowBalanceMantissa: BigInt!
}

"""
Auxiliary entity for AccountVToken
"""
type AccountVTokenTransaction @entity(immutable: true) {
  id: Bytes!

  account: AccountVToken!

  tx_hash: Bytes!

  timestamp: BigInt!

  block: BigInt!

  logIndex: BigInt!
}

"""
An interface for a transfer of any vToken. TransferEvent, MintEvent,
RedeemEvent, and LiquidationEvent all use this interface
"""
interface VTokenTransfer {
    "Transaction hash concatenated with log index"
    id: Bytes!
    "vTokens transferred"
    amountMantissa: BigInt!
    "Account that received tokens"
    to: Bytes!
    "Account that sent tokens"
    from: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
}

"""
TransferEvent will be stored for every mint, redeem, liquidation, and any normal
transfer between two accounts.
"""
type TransferEvent implements VTokenTransfer @entity(immutable: true) {
    "Transaction hash concatenated with log index"
    id: Bytes!
    "vTokens transferred"
    amountMantissa: BigInt!
    "Account that received tokens"
    to: Bytes!
    "Account that sent tokens"
    from: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Address of the vToken transferred"
    vTokenAddress: Bytes!
}

"""
MintEvent stores information for mints. From address will always be a vToken
market address
"""
type MintEvent implements VTokenTransfer @entity(immutable: true) {
    "Transaction hash concatenated with log index"
    id: Bytes!
    "vTokens transferred"
    amountMantissa: BigInt!
    "Account that received tokens (minter)"
    to: Bytes!
    "Account that sent tokens (VToken contract)"
    from: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Address of the vToken minted"
    vTokenAddress: Bytes!
    "Underlying token amount transferred"
    underlyingAmountMantissa: BigInt!
}

"""
RedeemEvent stores information for redeems. To address will always be a
vToken market address
"""
type RedeemEvent implements VTokenTransfer @entity(immutable: true) {
    "Transaction hash concatenated with log index"
    id: Bytes!
    "vTokens transferred"
    amountMantissa: BigInt!
    "Account that received tokens (VToken contract)"
    to: Bytes!
    "Account that sent tokens (redeemer)"
    from: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Address of the vToken transferred"
    vTokenAddress: Bytes!
    "Underlying token amount transferred"
    underlyingAmountMantissa: BigInt!
}

"""
LiquidationEvent stores information for liquidations. The event is emitted from
the vToken market address.
"""
type LiquidationEvent implements VTokenTransfer @entity(immutable: true) {
    "Transaction hash concatenated with log index"
    id: Bytes!
    "vTokens seized"
    amountMantissa: BigInt!
    "Liquidator receiving tokens"
    to: Bytes!
    "Account being liquidated (borrower)"
    from: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Address of the vToken that was seized as collateral"
    vTokenCollateralAddress: Bytes!
    "Address of the underlying asset repaid through liquidation"
    underlyingRepaidAddress: Bytes!
    "Underlying vToken amount that was repaid by liquidator"
    underlyingRepayAmountMantissa: BigInt!
}

"""
Underlying transfers are transfers of underlying collateral for both borrows
and repays
"""
interface UnderlyingTransfer {
    "Transaction hash concatenated with log index"
    id: Bytes!
    "Amount of underlying borrowed"
    amountMantissa: BigInt!
    "Total borrows of this asset the account has"
    accountBorrowsMantissa: BigInt!
    "Account that borrowed the tokens"
    borrower: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Address of the  underlying token that was seized as transferred"
    underlyingAddress: Bytes!
}

"""
BorrowEvent stores information for borrows
"""
type BorrowEvent implements UnderlyingTransfer @entity(immutable: true) {
    "Transaction hash concatenated with log index"
    id: Bytes!
    "Amount of underlying borrowed"
    amountMantissa: BigInt!
    "Total borrows of this asset the account has"
    accountBorrowsMantissa: BigInt!
    "Account that borrowed the tokens"
    borrower: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Address of the  underlying token that was borrowed"
    underlyingAddress: Bytes!
}

"""
RepayEvent stores information for repays. Payer is not always the same as
borrower, such as in the event of a Liquidation
"""
type RepayEvent implements UnderlyingTransfer @entity(immutable: true) {
    "Transaction hash concatenated with log index"
    id: Bytes!
    "Amount of underlying repaid"
    amountMantissa: BigInt!
    "Total borrows of this asset the account has"
    accountBorrowsMantissa: BigInt!
    "Account that borrowed the tokens"
    borrower: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Address of the  underlying token that was repaid"
    underlyingAddress: Bytes!
    "Payer of the borrow funds"
    payer: Bytes!
}
