type Delegate @entity {
  "A Delegate is any address that has been delegated with voting tokens by a token holder, id is the blockchain address of said delegate"
  id: Bytes!

  "Amount of XVS this user has staked"
  stakedXvsMantissa: BigInt!
  
  "Total amount of votes via delegation and staking"
  totalVotesMantissa: BigInt!

  "Accounts delegating to this voter"
  delegateCount: Int!

  "Accounts delegating to this voter"
  delegators: [Delegate!]! @derivedFrom(field: "delegatee")

  "Id of account receiving this accounts delegation"
  delegatee: Delegate

  "Votes that a delegate has made in different proposals"
  votes: [Vote!]! @derivedFrom(field: "voter")

  "Proposals that the delegate has created"
  proposals: [Proposal!]! @derivedFrom(field: "proposer")
}

enum PROPOSAL_TYPE {
  NORMAL
  FAST_TRACK
  CRITICAL
}

type _Schema_
  @fulltext(
    name: "proposalSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Proposal", fields: [{ name: "description" }] }]
  )

type Transaction @entity(immutable: true) {
  "Transaction hash used as the id"
  id: Bytes!
  
  "Transaction hash for the proposal action"
  txHash: Bytes!
  
  "Block number of the transaction"
  blockNumber: BigInt!
  
  "Timestamp of the transaction block"
  timestamp: BigInt!
}

type Proposal @entity {
  "Internal proposal id, it is an auto-incrementing id"
  id: ID!

  "Proposal Id"
  proposalId: BigInt!

  "Delegate that proposed the change"
  proposer: Delegate!

  "Targets data for the change"
  targets: [Bytes!]

  "Values data for the change"
  values: [BigInt!]

  "Signature data for the change"
  signatures: [String!]

  "Call data for the change"
  calldatas: [Bytes!]

  "Block number from where the voting starts"
  startBlock: BigInt!

  "Block number from where the voting ends"
  endBlock: BigInt!

  "String description of the change"
  description: String!

  "Once the proposal is queued for execution it will have an ETA of the execution"
  executionEta: BigInt

  "Created Transaction"
  created: Transaction
  
  "Queued Transaction"
  queued: Transaction

  "Canceled Transaction"
  canceled: Transaction

  "Executed Transaction"
  executed: Transaction

  "Total of for votes on the proposal"
  forVotes: BigInt!

  "Total of against votes on the proposal"
  againstVotes: BigInt!

  "Total of abstain votes on the proposal"
  abstainVotes: BigInt!

  "Difference between for and against"
  passing: Boolean!

  "Votes associated to this proposal"
  votes: [Vote!]! @derivedFrom(field: "proposal")

  "Type of Proposal can be normal fast track or critical"
  type: PROPOSAL_TYPE!

  "Remote Proposals created from this proposal"
  remoteProposals: [RemoteProposal!]! @derivedFrom(field: "sourceProposal")
}

enum SUPPORT {
  FOR
  AGAINST
  ABSTAIN
}

type Vote @entity(immutable: true) {
  "Delegate id + Proposal id"
  id: Bytes!

  "Whether the vote is in favour or against the proposal"
  support: SUPPORT!

  "Amount of votes in favour or against expressed in the smallest unit of the XVS Token"
  votes: BigInt!

  "Delegate that emitted the vote"
  voter: Delegate!

  "Proposal that is being voted on"
  proposal: Proposal!
  
  "V2 vote with reason"
  reason: String
}

type Governance @entity {
  "Unique entity used to keep track of common aggregated data"
  id: ID!

  "Number of proposals created"
  totalProposals: BigInt!

  "Total number of accounts participating in governance as delegates or by delegating"
  totalDelegates: BigInt!
  
  "Total number of accounts delegates that can participate in governance by voting or creating proposals"
  totalVoters: BigInt!

  "Total number of votes delegated expressed in the smallest unit of XVS"
  totalVotesMantissa: BigInt!
  
  "The number of votes required to reach quorum"
  quorumVotesMantissa: BigInt!
  
  "Active brains of Governor"
  implementation: Bytes!
  
  "Pending administrator for this contract"
  pendingAdmin: Bytes

  "Administrator for this contract"
  admin: Bytes!
  
  "A privileged role that can cancel any proposal"
  guardian: Bytes!

  "The maximum number of actions that can be included in a proposal"
  proposalMaxOperations: BigInt!
}

enum PermissionStatus {
  GRANTED,
  REVOKED
}

type Permission @entity {
  "Id generated for each Permission"
  id: Bytes!

  "Indicates if the permission was either GRANTED or REVOKED"
  status: PermissionStatus!

  "The target account of the event"
  accountAddress: Bytes!

  "The role made of the contract address and function signature encode packed"
  role: Bytes!

  "Created At Transaction Hash"
  createdAt: Bytes!

  "UpdatedAt At Transaction Hash"
  updatedAt: Bytes!
}

type MaxDailyLimit @entity {
  "Destination Chain Id as bytes"
  id: Bytes!
  
  "Chain Id that is approved to receive messages"
  destinationChainId: BigInt!
  
  "Maximum Number of messages that can be set to the destination chain"
  max: BigInt!
}

type OmnichainProposalSender @entity {
  ""
  id: Bytes!

  "Address of the Omnichain Proposal Sender"
  address: Bytes!

  "Access Control Manager for the Omnichain Proposal Sender"
  accessControlManagerAddress: Bytes!

  "Flag for if the Omnichain Proposal Sender is paused"
  paused: Boolean!
}


type TrustedRemote @entity {
  "LayerZero Chain id of the trusted remote"
  id: Bytes!

  layerZeroChainId: Int!
  
  "Governance contract address on the trusted remote"
  address: Bytes
  
  "Array of proposals sent to the remote"
  proposals: [RemoteProposal!] @derivedFrom(field: "trustedRemote")
  
  "True if active, false if inactive"
  active: Boolean!
}

type RemoteProposal @entity {
  "Concatenated sourceProposalId and layerZeroChainId"
  id: Bytes!

  "RemoteProposal Id"
  proposalId: BigInt

  "Remote ChainId where the proposal was sent"
  trustedRemote: TrustedRemote!

  "Targets data for the change"
  targets: [Bytes!]

  "Values data for the change"
  values: [BigInt!]

  "Signature data for the change"
  signatures: [String!]

  "Call data for the change"
  calldatas: [Bytes!]

  "Proposal (route) Type (Normal, FastTrack, Critical)"
  type: Int!

  "Proposal Id for the originating BNB Chain proposal"
  sourceProposal: Proposal!

  "RemoteProposalKey"
  stateTransactions: RemoteProposalStateTransaction @derivedFrom(field: "key")
}

type RemoteProposalStateTransaction @entity {
  "Remote Proposal Id"
  id: ID!

  "Concatenated sourceProposalId and layerZeroChainId"
  key: RemoteProposal!

  "Transaction Remote Proposal failed"
  stored: Transaction

  "Transaction Remote Proposal was executed"
  executed: Transaction

  "Transaction Remote Proposal was withdrawn"
  withdrawn: Transaction

  "If execution fails and is stored, this property will show the reason"
  failedReason: Bytes
}
